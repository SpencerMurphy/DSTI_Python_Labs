### PSEUDO CODE FOR PIPELINE DATA AUGMENTATION PROCESS

    - Process image and bounding Boxes
    - Albumentations' typical pipeline looks as followed
    augmentation_pipeline = A.Compose(
        [# Do something, # Do something # ...],
        bbox_params=A.BboxParams(format='coco', label_fields=['class_labels'])
        )

    - Then we apply the pipeline specifying our image, box coordinates, class labels
    - The pipeline returns a dictonnary from which we can retrieve
            - The image with pipeline['image']
            - The coord with pipeline['bboxes']
            - The label with pipeline['class_labels']

    - from these:
        - Write on disk the new image (cv2.imwrite(filename, image))
        - fuse the class_labels and bboxes in a numpy array and save as txt
        - for the name of each file just use the original name incremented by the looping count.


### Some code to keep handy


test     = read_image(path = "Data/20200827_084342.jpg", opencv_color_flag = -1)
pipeline = A.Compose([
     A.Resize(height = 256, width = 256),
     A.HorizontalFlip(p = 0.5),
     A.VerticalFlip(p = 0.5)
 ])

 resized = pipeline(image = test)
 cv2.imshow("test", mat = resized['image'])
 cv2.waitKey(0)
 cv2.destroyAllWindows()